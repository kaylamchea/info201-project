# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2){
if(str_count(toupper(string1), "z") > str_count(toupper(string2), "z")) {
return(string1)
} else if(str_count(tolower(string1), "z") < str_count(tolowerr(string2), "z")){
return(string2)
} else if(str_count(tolower(string1), "z") == 0 & str_count(tolower(string2), "z") == 0){
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs." )
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zi", "Ziel")
print(more_zs)
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2){
if(str_count(tolower(string1), "z") > str_count(tolower(string2), "z")) {
return(string1)
} else if(str_count(tolower(string1), "z") < str_count(tolower(string2), "z")){
return(string2)
} else if(str_count(tolower(string1), "z") == 0 & str_count(tolower(string2), "z") == 0){
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs." )
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zi", "Ziel")
print(more_zs)
has_more_zs <- function(string1, string2){
if(str_count(tolower(string1), "z") > str_count(tolower(string2), "z")) {
return(string1)
} else if(str_count(tolower(string1), "z") < str_count(tolower(string2), "z")){
return(string2)
} else if(str_count(tolower(string1), "z") == 0 & str_count(tolower(string2), "z") == 0){
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs." )
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zi", "Zziel")
print(more_zs)
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2){
if(str_count(tolower(string1), "z") > str_count(tolower(string2), "z")) {
return(string1)
} else if(str_count(tolower(string1), "z") < str_count(tolower(string2), "z")){
return(string2)
} else if(str_count(tolower(string1), "z") == 0 & str_count(tolower(string2), "z") == 0){
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs." )
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("i", "el")
print(more_zs)
more_zs <- has_more_zs("i", "el")
print(more_zs)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return(gsub("[0-9]+", "", strings))
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
classes <- c("INFO 201", "CSE 142")
print(remove_digits(classes))
classes <- c("INFO 201", "CSE 142")
remove_digits(classes)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter","Star War", "kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
print(top_three)
classes <- c("INFO 201", "CSE 142")
remove_digits(classes)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter","Star War","kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
print(top_three)
movies <- c("Harry Potter", "Star War","kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie")
print(excited)
movies <- c("Harry Potter", "Star War","kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie", sep = " ")
print(excited)
classes <- c("INFO 201", "CSE 142")
remove_digits(classes)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Star War","kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie", sep = "")
print(excited)
movies <- c("Harry Potter", "Star War", "kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie")
print(excited)
movies <- c("Harry Potter", "Star War", "kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste0(movies, " is a great movie")
print(excited)
without_four <- movies[-4]
print(without_four)
m <- c(24,56,16)
l <- m[m % 8 == 0]
l <- m[m<0]
8 %8
8 %% 8
l <- m[m %% 8 ==0]
print(l)
numbers <- 1:10
filter <- numbers
filter <- numbers[numbers %%2 ==0]
print(filter)
summarize_vector <- function(numbers){
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
}
summarize_vector <- function(numbers){
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
}
summarize_vector <- function(numbers){
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
summarize_vector <- function(numbers){
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
print(summary_1_to_100)
install.packages("lintr")
install.packages("styler")
library(lintr)
library(styler)
style_file("analysis.R")
install.packages("carData")
install.packages("carData")
install.packages("pscl")
install.packages("nycflights13")
install.packages("tidyr")
```{r echo = TRUE, eval = T}
library(ggplot2)
head(scale, 8)
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(scale, 8)
```
### Conclusions
My conclusions
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(scale, 8)
```
### Conclusions
My conclusions go here
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(scale, 8)
```
### Conclusions
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(mpg, 8)
```
### Conclusions
mpg
View(mpg)
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(mpg, 8)
```
### Conclusions
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
head(mpg, 8)
```
### Conclusions
now
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
qplot(data = mpg, x = displ)
```
### Conclusions
now
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
qplot(data = mpg, x = displ)
```
### Conclusions
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
qplot(data = mpg, x = displ)
```
### Conclusions
qplot(data = mpg, x = displ)
qplot(data = mpg, x = displ)
library(gplot2)
library(qplot2)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
top10_danger_state <- shoot_df %>%
arrange(-num_impacted) %>%
top_n(10, wt = num_impacted)
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
# Load the shiny, ggplot2, and dplyr libraries
library("shiny")
library("ggplot2")
library("dplyr")
education_data <- read.csv("data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
education_data <- read.csv("data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
education_data <- read.csv("./data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
# Load ggplot2, and dplyr libraries
library("ggplot2")
library("dplyr")
# Read the data
education_data <- read.csv("./data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
# Visualization 1
get_specific_lpc <- function(code) {
lpc <- education_data %>%
filter(year == 2010) %>%
select(year, country, lpc, region_code) %>%
group_by(country) %>%
summarise(lpc = sum(lpc),
region_code = region_code) %>%
filter(region_code == code)
}
lpc_region <- get_specific_lpc("Middle East and North Africa")
education_data
education_data <- read.csv("./data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
education_data <- read.csv("./data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
education_data <- read.csv("./data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
# Read the data
education_data <- read.csv("data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
# Read the data
education_data <- read.csv("./data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
education_data <- read.csv("../data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
# Load ggplot2, and dplyr libraries
library("ggplot2")
library("dplyr")
# Read the data
education_data <- read.csv("../data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
# Visualization 1
get_specific_lpc <- function(code) {
lpc <- education_data %>%
filter(year == 2010) %>%
select(year, country, lpc, region_code) %>%
group_by(country) %>%
summarise(lpc = sum(lpc),
region_code = region_code) %>%
filter(region_code == code)
}
lpc_region <- get_specific_lpc("Middle East and North Africa")
lpc_region
runApp('~/s')
source("m.R")
runApp()
plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
education_data <- read.csv("data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
education_data <- read.csv("data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
education_data <- read.csv("../data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
locations <- education_data %>%
filter(year == "2010") %>%
select(country, lu)
locations
plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
library("dplyr")
library("ggmap")
library("plotly")
plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
locations <- education_data %>%
filter(year == "2010") %>%
select(country, lu)
plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
m<-plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
typeof(m)
m
runApp()
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
runApp()
runApp()
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
runApp()
runApp()
runApp('~/s')
setwd("~/s")
runApp()
setwd("~/s")
runApp()
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
runApp()
setwd("C:/Users/zhaos/Desktop/info201/info201-project/docs")
library("dplyr")
library("ggmap")
# Load ggplot2, and dplyr libraries
library("plotly")
library("ggplot2")
library("dplyr")
library("ggmap")
# Read the data
education_data <- read.csv("../data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
# Plot
get_specific_lpc <- function(code) {
lpc <- education_data %>%
filter(year == 2010) %>%
select(year, country, lpc, region_code) %>%
group_by(country) %>%
summarise(lpc = sum(lpc),
region_code = region_code) %>%
filter(region_code == code)
}
lpc_region <- get_specific_lpc("Middle East and North Africa")
## Percentage of no schooling in 2010 in each country.
locations <- education_data %>%
filter(year == "2010") %>%
select(country, lu)
plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
locations
plot_geo
plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
library("plotly")
library("ggplot2")
library("dplyr")
library("ggmap")
locations <- education_data %>%
filter(year == "2010") %>%
select(country, lu)
plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
education_data <- read.csv("../data/barro_lee_dataset.csv", stringsAsFactors = FALSE)
## Percentage of no schooling in 2010 in each country.
locations <- education_data %>%
filter(year == "2010") %>%
select(country, lu)
plot_geo(
type = 'choropleth',
locations = locations$country,
locationmode = 'country names',
colorscale = 'Viridis',
z = locations$lu
)
runApp()
install.packages("ggmap")
